name: CI

on: [push, pull_request]

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache poetry
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-1.2.2-0

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: python-deps-${{ hashFiles('backend/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Run flake8
        run: poetry run flake8

      - name: Run black
        run: poetry run black . --check

      - name: Run mypy
        run: poetry run mypy .

      - name: Build image
        run: docker build .

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 19.2.0

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: node-deps-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install dependencies
        run: npm ci
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Run eslint
        run: npm run lint

      - name: Check translations
        run: npm run i18n:extract && npm run i18n:check

      - name: Build image
        run: docker build .
